/*********************                                                        */
/*! \file glpk.patch
 ** \verbatim
 ** Top contributors (to current version):
 **   Guy Katz
 ** This file is part of the Reluplex project.
 ** Copyright (c) 2016-2017 by the authors listed in the file AUTHORS
 ** (in the top-level source directory) and their institutional affiliations.
 ** All rights reserved. See the file COPYING in the top-level source
 ** directory for licensing information.\endverbatim
 **/


--- glpk-4.60/src/glpapi01.c	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/glpapi01.c	2016-12-17 15:50:42.948627934 -0800
@@ -101,6 +101,8 @@
       /* integer solution (MIP) */
       lp->mip_stat = GLP_UNDEF;
       lp->mip_obj = 0.0;
+
+      lp->boundCalculationCallback = NULL;
       return;
 }

--- glpk-4.60/src/glpapi06.c	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/glpapi06.c	2016-12-23 16:33:41.544854167 -0800
@@ -501,6 +501,12 @@
       parm->out_frq = 500;
       parm->out_dly = 0;
       parm->presolve = GLP_OFF;
+
+      parm->boundCalculationHook = NULL;
+      parm->iterationCountCallback = NULL;
+      parm->reportSoiCallback = NULL;
+      parm->makeReluAdjustmentsCallback = NULL;
+
       return;
 }

--- glpk-4.60/src/glpk.h	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/glpk.h	2016-12-25 12:23:53.500100449 -0800
@@ -106,6 +106,13 @@
       double foo_bar[38];     /* (reserved) */
 } glp_bfcp;

+
+typedef void (* BoundCalculationHook)( int n, int m, int *head, int leavingBasic, int enteringNonBasic, double *basicRow );
+typedef void (* IterationCountCallback)( int count );
+typedef void (* ReportSoiCallback)( double soi );
+typedef int (* MakeReluAdjustmentsCallback)( int n, int m, int leavingBasic, const int *head, const char *flags );
+
+
 typedef struct
 {     /* simplex method control parameters */
       int msg_lev;            /* message level: */
@@ -137,6 +144,12 @@
       int out_frq;            /* spx.out_frq */
       int out_dly;            /* spx.out_dly (milliseconds) */
       int presolve;           /* enable/disable using LP presolver */
+
+      BoundCalculationHook boundCalculationHook;
+      IterationCountCallback iterationCountCallback;
+      ReportSoiCallback reportSoiCallback;
+      MakeReluAdjustmentsCallback makeReluAdjustmentsCallback;
+
       double foo_bar[36];     /* (reserved) */
 } glp_smcp;

--- glpk-4.60/src/prob.h	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/prob.h	2016-12-17 15:46:03.774792176 -0800
@@ -143,6 +143,8 @@
          GLP_NOFEAS - no integer solution exists */
       double mip_obj;
       /* objective function value */
+
+  BoundCalculationHook *boundCalculationCallback;
 };

 struct GLPROW

--- glpk-4.60/src/simplex/spxlp.h	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/simplex/spxlp.h	2016-12-23 16:34:21.084991062 -0800
@@ -26,6 +26,8 @@

 #include "bfd.h"

+#include "glpk.h"
+
 /***********************************************************************
 *  The structure SPXLP describes LP problem and its current basis.
 *
@@ -152,6 +154,11 @@
       /* factorization validity flag */
       BFD *bfd;
       /* driver to factorization of the basis matrix */
+
+      BoundCalculationHook boundCalculationHook;
+      IterationCountCallback iterationCountCallback;
+      ReportSoiCallback reportSoiCallback;
+      MakeReluAdjustmentsCallback makeReluAdjustmentsCallback;
 };

 #define spx_factorize _glp_spx_factorize

--- glpk-4.60/src/simplex/spxprim.c	2016-04-01 00:00:00.000000000 -0700
+++ glpk-4.60/src/simplex/spxprim.c	2017-02-09 11:33:00.004417431 -0800
@@ -33,11 +33,15 @@
 /* 1 - use A in row-wise format
  * 0 - use N in row-wise format */

-#define EXCL 1
+#define MAINTAIN_RELU_INVARAINT 1
+/* 1 - maintain the relu invariant for non-basic variables
+ * 0 - do not maintain the relu invariant */
+
+#define EXCL 0
 /* 1 - exclude fixed non-basic variables
  * 0 - don't exclude variables */

-#define SHIFT 1
+#define SHIFT 0
 /* 1 - shift bounds of variables toward zero
  * 0 - don't shift bounds of variables */

@@ -142,6 +146,11 @@
       /* simplex iteration count at most recent display output */
       int inv_cnt;
       /* basis factorization count since most recent display output */
+
+#if MAINTAIN_RELU_INVARAINT
+       double *reluplex_tcol; /* double tcol[1+m]; */
+       /* a relu column of the simplex table */
+#endif
 };

 /***********************************************************************
@@ -733,10 +742,13 @@
       double tol_dj = csa->tol_dj;
       double tol_dj1 = csa->tol_dj1;
       int j, refct, ret;
+      int reluPartner;
+
 loop: /* main loop starts here */
       /* compute factorization of the basis matrix */
       if (!lp->valid)
-      {  double cond;
+      {
+	double cond;
          ret = spx_factorize(lp);
          csa->inv_cnt++;
          if (ret != 0)
@@ -895,6 +907,10 @@
                /* no feasible solution exists */
                if (msg_lev >= GLP_MSG_ALL)
                   xprintf("LP HAS NO PRIMAL FEASIBLE SOLUTION\n");
+
+	       if (lp->reportSoiCallback)
+		 (*(lp->reportSoiCallback))(sum_infeas(csa->lp, csa->beta));
+
                csa->p_stat = GLP_NOFEAS;
                csa->d_stat = GLP_UNDEF; /* will be set below */
                ret = 0;
@@ -951,19 +967,66 @@
       /* update values of basic variables for adjacent basis */
       spx_update_beta(lp, beta, csa->p, csa->p_flag, csa->q, tcol);
       csa->beta_st = 2;
+
+      /* Maintain the RELU invariant if needed */
+      if ( lp->makeReluAdjustmentsCallback )
+      {
+      	// We may need to adjust the relu invariant.
+      	// 1. If a pivot is going to occurr, we need to examine the LEAVING variable, p.
+      	// 2. If no pivot is going to occurred, we need to check the non-basic that jumps to the other bound, q.
+
+      	if (csa->p < 0)
+      	{
+      	  // No pivot is going to happen. Examine xN[q].
+      	  reluPartner = (*(lp->makeReluAdjustmentsCallback))( lp->n, lp->m,
+      							      head[lp->m + csa->q], lp->head, lp->flag );
+      	}
+      	else
+      	{
+      	  // A pivot is going to happen. Examine xB[p].
+      	  reluPartner = (*(lp->makeReluAdjustmentsCallback))( lp->n, lp->m,
+      							      head[csa->p], lp->head, lp->flag );
+      	}
+
+	xassert(MAINTAIN_RELU_INVARAINT);
+
+      	if ( reluPartner > 0 )
+      	{
+      	  // Need to flip the relu partner, xN[reluPartner].
+      	  // Passing -1 as p ensures that no pivoting is performed. p_flag is ignored.
+      	  // We do need to pass the column of variable q as the last parameter, though.
+
+      	  spx_eval_tcol(lp, reluPartner, csa->reluplex_tcol);
+      	  spx_update_beta(lp, beta, -1, 0, reluPartner, csa->reluplex_tcol);
+	  spx_change_basis(lp, -1, 0, reluPartner);
+      	}
+      }
+
       /* p < 0 means that xN[q] jumps to its opposite bound */
       if (csa->p < 0)
          goto skip;
       /* xN[q] enters and xB[p] leaves the basis */
       /* compute p-th row of inv(B) */
       spx_eval_rho(lp, csa->p, rho);
+
       /* compute p-th (pivot) row of the simplex table */
+
       if (at != NULL)
          spx_eval_trow1(lp, at, rho, trow);
       else
          spx_nt_prod(lp, nt, trow, 1, -1.0, rho);
+
+      if ( lp->boundCalculationHook )
+	(*(lp->boundCalculationHook))( lp->n, lp->m, lp->head, csa->p, csa->q, trow );
+
       /* FIXME: tcol[p] and trow[q] should be close to each other */
-      xassert(trow[csa->q] != 0.0);
+      // xassert(trow[csa->q] != 0.0);
+      if (trow[csa->q] == 0.0)
+      {
+         ret = GLP_EFAIL;
+         goto fini;
+      }
+
       /* update reduced costs of non-basic variables for adjacent
        * basis */
       if (spx_update_d(lp, d, csa->p, csa->q, trow, tcol) <= 1e-9)
@@ -986,7 +1043,8 @@
       }
       /* update steepest edge weights for adjacent basis, if used */
       if (se != NULL)
-      {  if (refct > 0)
+      {
+	if (refct > 0)
          {  if (spx_update_gamma(lp, se, csa->p, csa->q, trow, tcol)
                <= 1e-3)
             {  /* successful updating */
@@ -1005,13 +1063,17 @@
       /* update matrix N for adjacent basis, if used */
       if (nt != NULL)
          spx_update_nt(lp, nt, csa->p, csa->q);
-skip: /* change current basis header to adjacent one */
+
+skip:
+
+      /* change current basis header to adjacent one */
       spx_change_basis(lp, csa->p, csa->p_flag, csa->q);
       /* and update factorization of the basis matrix */
       if (csa->p > 0)
          spx_update_invb(lp, csa->p, head[csa->p]);
       /* simplex iteration complete */
       csa->it_cnt++;
+
       goto loop;
 fini: /* restore original objective function */
       memcpy(c, csa->c, (1+n) * sizeof(double));
@@ -1032,6 +1094,7 @@
 {     /* driver to primal simplex method */
       struct csa csa_, *csa = &csa_;
       SPXLP lp;
+
 #if USE_AT
       SPXAT at;
 #else
@@ -1042,7 +1105,14 @@
       /* build working LP and its initial basis */
       memset(csa, 0, sizeof(struct csa));
       csa->lp = &lp;
+
       spx_init_lp(csa->lp, P, EXCL);
+
+      lp.boundCalculationHook = parm->boundCalculationHook;
+      lp.iterationCountCallback = parm->iterationCountCallback;
+      lp.reportSoiCallback = parm->reportSoiCallback;
+      lp.makeReluAdjustmentsCallback = parm->makeReluAdjustmentsCallback;
+
       spx_alloc_lp(csa->lp);
       map = talloc(1+P->m+P->n, int);
       spx_build_lp(csa->lp, P, EXCL, SHIFT, map);
@@ -1092,6 +1162,11 @@
       }
       csa->list = talloc(1+csa->lp->n-csa->lp->m, int);
       csa->tcol = talloc(1+csa->lp->m, double);
+
+#if MAINTAIN_RELU_INVARAINT
+      csa->reluplex_tcol = talloc(1+csa->lp->m, double);
+#endif
+
       csa->trow = talloc(1+csa->lp->n-csa->lp->m, double);
       csa->work = talloc(1+csa->lp->m, double);
       /* initialize control parameters */
@@ -1126,8 +1201,13 @@
       csa->it_beg = csa->it_cnt = P->it_cnt;
       csa->it_dpy = -1;
       csa->inv_cnt = 0;
+
       /* try to solve working LP */
       ret = primal_simplex(csa);
+
+      if ( lp.iterationCountCallback )
+	(*(lp.iterationCountCallback))(csa->it_cnt);
+
       /* return basis factorization back to problem object */
       P->valid = csa->lp->valid;
       P->bfd = csa->lp->bfd;
@@ -1183,6 +1263,9 @@
          spx_free_se(csa->lp, csa->se);
       tfree(csa->list);
       tfree(csa->tcol);
+#if MAINTAIN_RELU_INVARAINT
+      tfree(csa->reluplex_tcol);
+#endif
       tfree(csa->trow);
       tfree(csa->work);
       /* return to calling program */
